#include <iostream>
#include <vector>
#include <string>
#include <cctype>
#include <stack>
#include <queue>


using namespace std;

struct LeetCode {

    //Stack
    //Detyra 1: Implement Stack using Queues
    class MyStack {
    private:
        queue<int> queue1;
        queue<int> queue2;

    public:
        MyStack() {

        }

        void push(int x) {
            queue2.push(x);

            while (!queue1.empty()) {
                queue2.push(queue1.front());
                queue1.pop();
            }

            swap(queue1, queue2);
        }

        int pop() {
            int top = queue1.front();
            queue1.pop();
            return top;
        }

        int top() {
            return queue1.front();
        }

        bool empty() {
            return queue1.empty();
        }
    };
    //Detyra 2: Implement Queue using Stacks
    class MyQueue {
    private:
        stack<int> Stack1;
        stack<int> Stack2;

    public:
        MyQueue() {

        }

        void push(int x) {
            Stack1.push(x);
        }

        int pop() {
            if (Stack2.empty()) {
                while (!Stack1.empty()) {
                    Stack2.push(Stack1.top());
                    Stack1.pop();
                }
            }

            int front = Stack2.top();
            Stack2.pop();
            return front;
        }

        int peek() {
            if (Stack2.empty()) {
                while (!Stack1.empty()) {
                    Stack2.push(Stack1.top());
                    Stack1.pop();
                }
            }

            return Stack2.top();
        }

        bool empty() {
            return Stack1.empty() && Stack2.empty();
        }
    };
    //Detyra 3: Next Greater Element I
    vector<int> nextGreaterElement(vector<int>& nums1, vector<int>& nums2) {
        stack<int> st;
        vector<int> nextGreater(nums2.size(), -1);

        for (int i = 0; i < nums2.size(); i++) {
            while (!st.empty() && nums2[i] > nums2[st.top()]) {
                nextGreater[st.top()] = nums2[i];
                st.pop();
            }

            st.push(i);
        }

        vector<int> result;

        for (int i = 0; i < nums1.size(); i++) {
            int num = nums1[i];
            int index = -1;

            for (int j = 0; j < nums2.size(); j++) {
                if (nums2[j] == num) {
                    index = j;
                    break;
                }
            }

            if (index != -1 && nextGreater[index] != -1) {
                result.push_back(nextGreater[index]);
            }
            else {
                result.push_back(-1);
            }
        }

        return result;
    }

    //Queue
    //Detyra 1 First Unique Character in a String:
    class Solution {
    public:
        int firstUniqChar(string s) {
            int count[26] = { 0 };
            queue<char> charQueue;

            for (int i = 0; i < s.size(); i++) {
                char c = s[i];
                count[c - 'a']++;
                charQueue.push(c);
            }

            int index = 0;
            while (!charQueue.empty()) {
                char c = charQueue.front();
                charQueue.pop();

                if (count[c - 'a'] == 1) {
                    return index;
                }

                index++;
            }

            return -1;
        }
    };

    //Detyra 2: Number of Recent Calls
    class Solution2 {
    public:
        int firstUniqChar(string s) {
            int count[26] = { 0 };
            queue<char> charQueue;

            for (int i = 0; i < s.size(); i++) {
                char c = s[i];
                count[c - 'a']++;
                charQueue.push(c);
            }

            int index = 0;
            while (!charQueue.empty()) {
                char c = charQueue.front();
                charQueue.pop();

                if (count[c - 'a'] == 1) {
                    return index;
                }

                index++;
            }

            return -1;
        }
    };

    //Detyra 3: Number of Students Unable to Eat Lunch
    int countStudents(vector<int>& students, vector<int>& sandwiches) {
        int n = students.size();
        int circularCount = 0;
        int squareCount = 0;

        for (int i = 0; i < n; i++) {
            if (students[i] == 0) {
                circularCount++;
            }
            else {
                squareCount++;
            }
        }

        for (int i = 0; i < n; i++) {
            if (sandwiches[i] == 0) {
                if (circularCount == 0) {
                    return n - i;
                }
                circularCount--;
            }
            else {
                if (squareCount == 0) {
                    return n - i;
                }
                squareCount--;
            }
        }

        return 0;
    }

    //Sorting
    //Detyra 1: Find the Difference
    char findTheDifference(string s, string t) {
        char result = 0;

        for (int i = 0; i < s.length(); i++) {
            result ^= s[i];
        }

        for (int i = 0; i < t.length(); i++) {
            result ^= t[i];
        }

        return result;
    }

    //Detyra 2: Maximum Product of Three Numbers
    int maximumProduct(vector<int>& nums) {
        sort(nums.begin(), nums.end());

        int n = nums.size();

        return max(nums[n - 1] * nums[n - 2] * nums[n - 3], nums[0] * nums[1] * nums[n - 1]);
    }

    //Detyra 3: Merge Sorted Array
    void merge(vector<int>& nums1, int m, vector<int>& nums2, int n) {
        int i = m - 1;
        int j = n - 1;
        int k = m + n - 1;

        while (i >= 0 && j >= 0) {
            if (nums1[i] > nums2[j]) {
                nums1[k--] = nums1[i--];
            }
            else {
                nums1[k--] = nums2[j--];
            }
        }

        while (j >= 0) {
            nums1[k--] = nums2[j--];
        }
    }

    //Greedy
    //Detyra 1: Lemonade Change
    bool lemonadeChange(vector<int>& bills) {
        int fiveCount = 0;
        int tenCount = 0;

        for (int i = 0; i < bills.size(); i++) {
            int bill = bills[i];

            if (bill == 5) {
                fiveCount++;
            }
            else if (bill == 10) {
                if (fiveCount == 0) {
                    return false;
                }
                fiveCount--;
                tenCount++;
            }
            else if (bill == 20) {
                if (tenCount > 0 && fiveCount > 0) {
                    tenCount--;
                    fiveCount--;
                }
                else if (fiveCount >= 3) {
                    fiveCount -= 3;
                }
                else {
                    return false;
                }
            }
        }

        return true;
    }

    //Detyra 2: Largest Perimeter Triangle
    int largestPerimeter(vector<int>& nums) {
        int p = 0;
        sort(nums.begin(), nums.end());
        for (int i = nums.size() - 1; i >= 2; i--) {
            if (nums[i - 1] + nums[i - 2] > nums[i]) {
                p = nums[i] + nums[i - 1] + nums[i - 2];
                break;
            }
        }
        return p;
    }

    //Detyra 3: Split a String in Balanced Strings
    int balancedStringSplit(std::string s) {
        int count = 0;
        int balance = 0;

        for (int i = 0; i < s.length(); i++) {
            char ch = s[i];

            if (ch == 'L') {
                balance++;
            }
            else if (ch == 'R') {
                balance--;
            }

            if (balance == 0) {
                count++;
            }
        }

        return count;
    }

    //Binary Search
    //Detyra 1: Sqrt(x)
    int mySqrt(int x) {
        if (x <= 1) {
            return x;
        }

        int left = 0;
        int right = x;

        while (left < right) {
            int mid = left + (right - left) / 2;
            if (mid > x / mid) {
                right = mid;
            }
            else {
                left = mid + 1;
            }
        }

        return left - 1;
    }

    //Detyra 2: Binary Search
    int search(vector<int>& nums, int target) {
        int left = 0;
        int right = nums.size() - 1;

        while (left <= right) {
            int mid = left + (right - left) / 2;

            if (nums[mid] == target) {
                return mid;
            }
            else if (nums[mid] < target) {
                left = mid + 1;
            }
            else {
                right = mid - 1;
            }
        }

        return -1;
    }

    //Detyra 3: Count Negative Numbers in a Sorted Matrix
    int countNegatives(vector<vector<int>>& grid) {
        int count = 0;
        int rows = grid.size();
        int cols = grid[0].size();

        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < cols; j++) {
                if (grid[i][j] < 0) {
                    count++;
                }
            }
        }

        return count;
    }

    //Tree
   struct TreeNode {
    int val;
    TreeNode* left;
    TreeNode* right;
    TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
};
    //Detyra 1: Same Tree
    bool isSameTree(TreeNode* p, TreeNode* q) {

        if (p == nullptr && q == nullptr) {
            return true;

        }
        else if (p == nullptr || q == nullptr) {
            return false;
        }

        if (p->val != q->val) {
            return false;
        }

        return (isSameTree(p->left, q->left) && isSameTree(p->right, q->right));
    }

    //Detyra 2: Sum of Left Leaves
    int sumOfLeftLeaves(TreeNode* root) {
        if (root == nullptr) {
            return 0;
        }

        int sum = 0;

        if (root->left != nullptr && root->left->left == nullptr && root->left->right == nullptr) {
            sum += root->left->val;
        }

        sum += sumOfLeftLeaves(root->left);
        sum += sumOfLeftLeaves(root->right);

        return sum;
    }

    //Detyra 3: Maximum Depth of Binary Tree
    int maxDepth(TreeNode* root) {
        if (root == nullptr) {
            return 0;
        }

        int leftDepth = maxDepth(root->left);
        int rightDepth = maxDepth(root->right);

        return 1 + max(leftDepth, rightDepth);
    }

    //Linked List
   struct ListNode {
    int val;
    ListNode* next;
    ListNode(int x) : val(x), next(nullptr) {}
    };
    //Detyra 1: Merge Two Sorted Lists
    ListNode* mergeTwoLists(ListNode* list1, ListNode* list2) {
        if (list1 == nullptr) {
            return list2;
        }
        if (list2 == nullptr) {
            return list1;
        }
        if (list1->val <= list2->val) {
            list1->next = mergeTwoLists(list1->next, list2);
            return list1;
        }
        else {
            list2->next = mergeTwoLists(list1, list2->next);
            return list2;
        }
    }

    //Detyra 2: Middle of the Linked List
    ListNode* middleNode(ListNode* head) {
        ListNode* one = head;
        ListNode* two = head;

        while (two != nullptr && two->next != nullptr) {
            one = one->next;
            two = two->next->next;
        }

        return one;
    }

};

int main() {
    //1
    LeetCode::MyStack myStack;
    myStack.push(1);
    myStack.push(2);
    cout << myStack.top() << endl;
    cout << myStack.pop() << endl;
    cout << myStack.empty() << endl;

    //2
    LeetCode::MyQueue queue;
    queue.push(1);
    queue.push(2);
    cout << queue.peek() << endl;
    cout << queue.pop() << endl;
    cout << queue.empty() << endl;

    //3
    vector<int> nums1 = { 4, 1, 2 };
    vector<int> nums2 = { 1, 3, 4, 2 };
    LeetCode detyra;
    vector<int> result = detyra.nextGreaterElement(nums1, nums2);

    for (int num : result) {
        cout << num << " ";
    }
    cout << endl;

    //1
    LeetCode::Solution solution;
    string input = "leetcode";

    int result = solution.firstUniqChar(input);
    
    //2 
    
    //3
    vector<int> students{ 1, 1, 0, 0 }, sandwiches{ 0,1,0,1 };
    int result2 = detyra.countStudents(students, sandwiches); 

    //1
    string s1 = "LLLR";
    string s2 = "RRLL";
    char result3 = detyra.findTheDifference(s1, s2);

    //2
    vector<int> v{ 4,7,5 };
    int result3 = detyra.maximumProduct(v);

    //3
    int m = 4, n = 4;
    detyra.merge(students, m, sandwiches, n);

    //1


   

    return 0;
}

